{"name":"rf12registry","tagline":"","body":"###\r\n\r\n# RF12Registry #\r\n\r\nThis module exports a single class 'RF12RegistryManager' which itself manages the singleton RF12Registry\r\n(which is the real class we actually use)\r\n\r\nRF12Registry implements a simple 'Registry' to enable\r\na number of 'RF12Demo.10+' (compatible) 'driver' clients to register their\r\nservices for 'write' actions. The registration is a simple act whereby\r\nthe driver registers a set of 1 or more 'patterns' relating to radio band / radio group\r\npairs that it is willing to act on behalf of.\r\n\r\nA full registration pattern takes the form <band>/<group>|<writemask>\r\n\r\ne.g if a driver registered with '868/200|%1' it would represent the fact that this\r\ndriver is willing to handle 'write' requests for communications on 868Mhz group 200 \r\nusing the default 'RF12demo.10' direct write format (band,group,node,hdr,byte1,byte2,byten>)\r\n\r\nThe <band> parameter may take the following forms:\r\n%b - the home band of the underlying device the driver manages. i.e. %b/200|%1\r\n*  - any band i.e. *\\/200|%1\r\n\r\n/  - required - seperates <band> and <group>\r\n\r\nThe <group> parameter may take the following forms:\r\n%g - the home group of the underlying device the driver manages. i.e. 868/%g|%1\r\n*  - any group i.e. 868/*|%1 \r\n\r\n|  - required - seperates <band/group> from <writemask>\r\n\r\nThe <writemask> parameter may be made up of the following tokens:\r\n \r\n%1 - use the default RF12Demo.10 'write' format = '%b,%g,%i,%h,%s>'\r\n%b - the band parameter - this is aliased to the band code 3,4,8 or 9 for RF12 Driver, or see %B\r\n%B - passes the band through unchanged - 868 does NOT get changed to 8\r\n%g - the group parameter\r\n%i - the destination node parameter\r\n%h - the header byte parameter\r\n%s - the actual data parameter that is the real information to be sent over the air.\r\n\r\nDrivers are registered in a 'last registration wins' scenario, but drivers are matched\r\nfor writes on a 'first match is used' scenario.\r\ne.g. if two drivers both register for 868/212, the last driver is the one that is used.\r\ne.g  if one driver registers for 868/* and other for 868/212, and a write request\r\ncome for 868/212, the first pattern (868/*) will be picked.\r\nIn reality this contention may not matter for 90% use cases.\r\n(this approach may be updated)\r\n\r\nThe 'writemask' allows multiple different 'RF12Demo' drivers to have a flexible write\r\nstructure whilst keeping a single 'write' interface.\r\n\r\nAs an example:\r\n\r\nAssuming a write request was as follows:\r\n  \r\n  registry.write(868,200,7,0,\"1,1,1,1,1,1,1,1,1,1\")\r\n\r\nA Normal 'RF12Demo.10' driver handling /dev/ttyAMA0 device could register as '868/200|%1'\r\nwhereby a the above write request would equate to the following:\r\n'868,200,7,0,1,1,1,1,1,1,1,1,1,1>'\r\nwhich will send 10 * 1s to node 7 on band 868 group 200\r\n\r\nAnother driver which simulates 'RF12Demo.10' but uses a different protocol\r\ncould register the following pattern: '868/199|PUMP %s\\r'\r\nAnd if sent\r\n  registry.write(868,200,7,0,\"ON\")\r\nwould equate to:\r\n'PUMP ON\\r' (note that the driver did not need band/goup etc as it has its own protocol)\r\n\r\n###\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}